"""Methods for consuming the JSON file generated by scrape_egg_groups.py and generating a JSON file with the shortest 'path' between each pair of egg groups"""

import json
import itertools

def get_pkmn_by_egg_group():
    """Reads the JSON file generated by scrape_egg_groups"""
    with open('egg_groups.json', encoding="utf-16") as json_file:
        return json.load(json_file)

def reduce_pkmn_to_unique_egg_groups(pkmn_key_list, egg_groups_dict, unique_pair_dict):
    """Reduces a list of pokemon to a dict of pokemon in each unique combination of egg groups"""

    for pkmn_key in pkmn_key_list:
        egg_group_keys = egg_groups_dict[pkmn_key]['egg_groups']
        egg_group_keys.sort()
        egg_group_pair_key = '-'.join(egg_group_keys)
        if egg_group_pair_key in unique_pair_dict:
            unique_pair_dict[egg_group_pair_key].append(pkmn_key)
        else:
            unique_pair_dict[egg_group_pair_key] = [pkmn_key]

def generate_egg_group_paths():
    """Generates a JSON file with the shortest 'path' between each pair of egg groups"""

    egg_groups_dict = get_pkmn_by_egg_group()

    egg_group_paths = {}
    egg_group_keys = list(egg_groups_dict.keys())

    pkmn_by_unique_egg_groups = {}

    for egg_group_key in egg_group_keys:
      # If the two pokemon are in the same egg group, the path is just the egg group
      same_pair_key = egg_group_key + '-' + egg_group_key
      # Ditto and No Eggs are special cases with no breeding paths
      if 'ditto' in egg_group_key or 'no_eggs' in egg_group_key:
        egg_group_paths[same_pair_key] = []
      else:
        egg_group_paths[same_pair_key] = [egg_group_key]

      pkmn_in_egg_group = egg_groups_dict[egg_group_key]
      reduce_pkmn_to_unique_egg_groups(pkmn_in_egg_group.keys(), pkmn_in_egg_group, pkmn_by_unique_egg_groups)

    print(pkmn_by_unique_egg_groups)

    # # Generate all possible pairs of egg groups
    # egg_group_pairs = list(itertools.combinations(egg_group_keys, 2))
    # for egg_group_pair in egg_group_pairs:
    #     egg_pair_key = '-'.join(egg_group_pair)
    #     egg_group_paths[egg_pair_key] = []
    #     # Ditto and No Eggs are special cases with no breeding paths
    #     if 'ditto' in egg_pair_key | 'no_eggs' in egg_pair_key:
    #         continue
    #     else:
    #       #







generate_egg_group_paths()
